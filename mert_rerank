#!/usr/bin/env python
import optparse
import sys

class MERT:
    def __init__(self, init_weights={}):
        self.init_weights = init_weights

    def run_mert(self, data):
        # candidates := list of (num, hypo, feature dictionary) tuples
        # TODO ???
        dimensions = [(1,0,0), (0,1,0), (0,0,1)]    
        pass

    def line_search(self, data, w, d, loss):
        for candidates in data:
            for (num, hypo, features) in candidates:
                pass


class Point:
    def __init__(self, hypo, weights, score):
        self.hypo = hypo
        self.weights = weights
        self.score = score
            
    def score(self):
        return self.score

    def weights(self):
        return self.weights

    def hypothesis(self):
        return self.hypothesis


if __name__ == '__main__':
    optparser = optparse.OptionParser()
    optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best", help="100-best translation lists")
    optparser.add_option("-l", "--lm", dest="lm", default=-1.0, type="float", help="Language model weight")
    optparser.add_option("-t", "--tm1", dest="tm1", default=-0.5, type="float", help="Translation model p(e|f) weight")
    optparser.add_option("-s", "--tm2", dest="tm2", default=-0.5, type="float", help="Lexical translation model p_lex(f|e) weight")
    (opts, _) = optparser.parse_args()
    init_weights = {'p(e)'       : float(opts.lm) ,
                    'p(e|f)'     : float(opts.tm1),
                    'p_lex(f|e)' : float(opts.tm2)}

    all_hyps = [pair.split(' ||| ') for pair in open(opts.input)]
    num_sents = len(all_hyps) / 100
    mert = MERT(init_weights)   # M.E.R.T. engine
    
    data = []
    for s in xrange(0, num_sents):
        hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
        candidates = []
        for (num, hyp, feats) in hyps_for_one_sent:
            features = {}
            for feat in feats.split(' '):
                (k, v) = feat.split('=')
                features[k] = v
            candidates.append((num, hyp, features))
        data.append(candidates)

    try: 
        sys.stdout.write("%s\n" % best_hypo)
    except (Exception):
        sys.exit(1)
 



